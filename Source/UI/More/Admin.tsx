import {styles} from "../../Frame/UI/GlobalStyles";
import {BaseComponent, BaseProps} from "../../Frame/UI/ReactGlobals";
import {firebaseConnect} from "react-redux-firebase";
import Button from "../../Frame/ReactComponents/Button";
import VMessageBox from "../../Frame/UI/VMessageBox";
import {ShowMessageBox} from "../../Frame/UI/VMessageBox";
import {E} from "../../Frame/General/Globals_Free";
import {MapNodeType} from "../../Store/firebase/nodes/@MapNodeType";
import {Map, MapType} from "../../Store/firebase/maps/@Map";
import {MapNode} from "../../Store/firebase/nodes/@MapNode";
import UserExtraInfo from "../../Store/userExtras/@UserExtraInfo";

@firebaseConnect()
export default class AdminUI extends BaseComponent<{}, {}> {
	render() {
		let {firebase} = this.props;
		return (
			<div style={E(styles.page)}>
				<Button text="Reset database" onClick={()=> {
					ShowMessageBox({
						title: "Reset database?", message: "This will clear all existing data.", cancelButton: true,
						onOK: async ()=> {
							/*await firebase.Ref("nodes").remove();
							let rootNode: MapNode = {
								type: MapNodeType.Category,
								title: "Root",
								agrees: 0, degree: 0, disagrees: 0, weight: 0, // averages, generated by server
								creator: null,
								approved: true,
								accessLevel: 0, voteLevel: 0,
								supportChildren: {},
								opposeChildren: {},
								talkChildren: {},
							};
							await firebase.Ref(`nodes/${1}`).set(rootNode);
							ShowMessageBox({message: "Done!"});*/

							let user1Key = "Ecq3r7NvgahaMwQQ3PsdgqAFirD2";
							let _ = true; // placeholder, for prop-less objects, which we want to still be saved
							let data = {
								users: {
									[user1Key]: {
										avatarUrl: "https://lh6.googleusercontent.com/-CeOB1puP1U8/AAAAAAAAAAI/AAAAAAAAAZA/nk51qe4EF8w/photo.jpg",
										displayName: "Stephen Wicklund",
										email: "venryx@gmail.com",
										providerData: [
											{
												displayName: "Stephen Wicklund",
												email: "venryx@gmail.com",
												photoURL: "https://lh6.googleusercontent.com/-CeOB1puP1U8/AAAAAAAAAAI/AAAAAAAAAZA/nk51q4EF8w/photo.jpg",
												providerId: "google.com",
												uid: "108415649882206100036"
											}
										]
									},
								},
								userExtras: {
									[user1Key]: new UserExtraInfo({
										permissionGroups: {basic: true, verified: true, mod: true, dev: true},
									}),
								},
								maps: {
									1: {
										name: "Global",
										type: MapType.Global,
										rootNode: 1
									} as Map,
								},
								nodes: {
									1: new MapNode({
										type: MapNodeType.Category, title: "Root",
										creator: user1Key, approved: true,
										agrees: 1, degree: .7, disagrees: 0, weight: 0, // totals/averages, generated by server
										children: {2: {_}, 3: {_}, 4: {_}, 5: {_}, 6: {_}, 7: {_}, 8: {_}}, talkRoot: null,
									}),
									2: new MapNode({
										type: MapNodeType.Category, title: "Science",
										creator: user1Key, approved: true,
									}),
									3: new MapNode({
										type: MapNodeType.Category, title: "Philosophy",
										creator: user1Key, approved: true,
									}),
									4: new MapNode({
										type: MapNodeType.Category, title: "Religion",
										creator: user1Key, approved: true,
									}),
									5: new MapNode({
										type: MapNodeType.Category, title: "History",
										creator: user1Key, approved: true,
									}),
									6: new MapNode({
										type: MapNodeType.Category, title: "Politics",
										creator: user1Key, approved: true,
									}),
									7: new MapNode({
										type: MapNodeType.Category, title: "Everyday",
										creator: user1Key, approved: true,
									}),
									8: new MapNode({
										type: MapNodeType.Category, title: "Others",
										creator: user1Key, approved: true,
									}),
								},
								nodeExtras: {
									1: {
										/*title:{^}
											revisions:{^}
												1:{^}
													content:"If something in the universe has expanded, its age in years is at least half its expansion distance in [light years]"
													creator:"user123"
													date:"date123"
												2:{^}
													content:"Things that reach a length of X [light years] through expansion (in one direction) (from [negligible size]) are at least X years old"
													creator:"user123"
													date:"date123"
											termBindings:{^}
												"light years":{^}
													light-year-10:{^}
														upvoters:{^}
															user123:true*/
										agrees: {
											Ecq3r7NvgahaMwQQ3PsdgqAFirD2: .7
										},
										disagrees: {
										}
									}
								}
							};

							await firebase.Ref().update(data);
							ShowMessageBox({message: "Done!"});
						}
					});
				}}/>
			</div>
		);
	}
}